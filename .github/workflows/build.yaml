name: packages
on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+a[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+b[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
  # Dry-run only
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * SUN'

jobs:
  conda_build:
    name: Build Conda Packages
    runs-on: 'ubuntu-latest'
    defaults:
      run:
        shell: bash -l {0}
    env:
      CHANS_DEV: "-c pyviz/label/dev -c bokeh/label/dev -c conda-forge"
      PKG_TEST_PYTHON: "--test-python=py39"
      PYTHON_VERSION: "3.9"
      MPLBACKEND: "Agg"
    steps:
      - name: remove nodejs
        run: |
          sudo rm /usr/local/bin/node
          sudo rm /usr/local/bin/npm
      - uses: actions/checkout@v3
        with:
          fetch-depth: "100"
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          python-version: 3.9
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Fetch unshallow
        run: git fetch --prune --tags --unshallow -f
      - name: Set output
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: conda setup
        run: |
          conda config --set always_yes True
          conda config --append channels pyviz/label/dev
          conda config --append channels bokeh/label/dev
          conda install -y conda-build anaconda-client build
      - name: conda build
        run: |
          bash ./scripts/build_conda.sh
      - name: build pyodide wheels for CDN
        run: |
          python ./scripts/build_pyodide_wheels.py
      - name: npm setup
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_API_TOKEN }}" > $HOME/.npmrc
          npm whoami
          npm -v
      - name: npm build
        run: |
          SETUPTOOLS_ENABLE_FEATURES="legacy-editable" python -m pip install -ve .
          cd ./panel
          npm publish --dry-run
          cd ..
      - name: conda dev deploy
        if: (github.event_name == 'push' && (contains(steps.vars.outputs.tag, 'a') || contains(steps.vars.outputs.tag, 'b') || contains(steps.vars.outputs.tag, 'rc')))
        run: |
          VERSION="$(echo "$(ls dist/*.whl)" | cut -d- -f2)"
          FILE="$CONDA_PREFIX/conda-bld/noarch/panel-$VERSION-py_0.tar.bz2"
          anaconda --token ${{ secrets.CONDA_UPLOAD_TOKEN }} upload --user pyviz --label=dev $FILE
      - name: npm dev deploy
        if: (github.event_name == 'push' && (contains(steps.vars.outputs.tag, 'a') || contains(steps.vars.outputs.tag, 'b') || contains(steps.vars.outputs.tag, 'rc')))
        run: |
          cd ./panel
          npm publish --tag dev
          cd ..
      - name: conda main deploy
        if: (github.event_name == 'push' && !(contains(steps.vars.outputs.tag, 'a') || contains(steps.vars.outputs.tag, 'b') || contains(steps.vars.outputs.tag, 'rc')))
        run: |
          VERSION="$(echo "$(ls dist/*.whl)" | cut -d- -f2)"
          FILE="$CONDA_PREFIX/conda-bld/noarch/panel-$VERSION-py_0.tar.bz2"
          anaconda --token ${{ secrets.CONDA_UPLOAD_TOKEN }} upload --user pyviz --label=dev --label=main $FILE
      - name: npm main deploy
        if: (github.event_name == 'push' && !(contains(steps.vars.outputs.tag, 'a') || contains(steps.vars.outputs.tag, 'b') || contains(steps.vars.outputs.tag, 'rc')))
        run: |
          cd ./panel
          npm publish --tag latest
          cd ..
      - name: Deploy to cdn.holoviz.org
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
        run: python scripts/cdn_upload.py
  pip_build:
    name: Build PyPI Packages
    runs-on: 'ubuntu-latest'
    defaults:
      run:
        shell: bash -l {0}
    env:
      CHANS_DEV: "-c pyviz/label/dev -c bokeh/label/dev -c conda-forge"
      PKG_TEST_PYTHON: "--test-python=py39"
      PYTHON_VERSION: "3.9"
      CHANS: "-c pyviz"
      MPLBACKEND: "Agg"
      PYPI: "https://upload.pypi.org/legacy/"
    steps:
      - name: remove nodejs
        run: |
          sudo rm /usr/local/bin/node
          sudo rm /usr/local/bin/npm
      - uses: actions/checkout@v3
        with:
          fetch-depth: "100"
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
      - uses: actions/setup-node@v2
        with:
          node-version: '15'
      - name: Fetch unshallow
        run: git fetch --prune --tags --unshallow -f
      - name: conda setup
        run: |
          conda config --set always_yes True
          conda install -c pyviz "pyctdev>=0.5"
          doit ecosystem_setup
          doit env_create $CHANS_DEV --python=$PYTHON_VERSION
      - name: env setup
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          conda install ${{ env.CHANS_DEV }} "pip<21.2.1"
          doit develop_install $CHANS_DEV -o build
          pip uninstall -y panel
          doit pip_on_conda
      - name: pip build
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          doit ecosystem=pip package_build $PKG_TEST_PYTHON --test-group=flakes
      - name: git status
        run: |
          git status
          git diff
      - name: pip upload
        if: github.event_name == 'push'
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          doit ecosystem=pip package_upload -u ${{ secrets.PPU }} -p ${{ secrets.PPP }} -r $PYPI
