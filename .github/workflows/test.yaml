name: tests
on:
  push:
    branches:
      - master
  pull_request:
    branches:
    - '*'
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * SUN'

jobs:
  pre_commit:
    name: Run pre-commit hooks
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "1"
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: pre-commit
        uses: pre-commit/action@v3.0.0
  unit_test_suite:
    name: Unit tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    needs: [pre_commit]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: [3.7, 3.8, 3.9]
    timeout-minutes: 90
    defaults:
      run:
        shell: bash -l {0}
    env:
      DESC: "Python ${{ matrix.python-version }} tests"
      PYTHON_VERSION: ${{ matrix.python-version }}
      SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"
      DISPLAY: ":99.0"
      PYTHONIOENCODING: "utf-8"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Without this env var `doit env_create ...` uses by default
      # the `pyviz` channel, except that we don't want to configure
      # it as one of the sources.
      PYCTDEV_SELF_CHANNEL: "pyviz/label/dev"
    steps:
      - uses: pyviz-dev/holoviz_tasks/install@v0.1a6
        with:
          name: unit_test_suite
          python-version: ${{ matrix.python-version }}
          channels: pyviz/label/dev,bokeh,conda-forge,nodefaults
          nodejs: true
          envs: "-o examples -o recommended -o tests -o build"
          cache: true
          opengl: true
        id: install
      - name: doit develop_install
        if: steps.install.outputs.cache-hit != 'true'
        run: |
          conda activate test-environment
          pip install pyecharts idom
      - name: bokeh_sampledata
        run: |
          conda activate test-environment
          bokeh sampledata
      - name: doit test_unit
        run: |
          conda activate test-environment
          doit test_unit
      - name: test examples
        run: |
          conda activate test-environment
          doit test_examples
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unitexamples-tests
          fail_ci_if_error: false # optional (default = false)
  ui_test_suite:
    name: UI tests on ${{ matrix.os }} with Python 3.9
    needs: [pre_commit]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -l {0}
    env:
      DESC: "Python ${{ matrix.python-version }} tests"
      PYTHONIOENCODING: "utf-8"
      PANEL_LOG_LEVEL: info
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"
      # Without this env var `doit env_create ...` uses by default
      # the `pyviz` channel, except that we don't want to configure
      # it as one of the sources.
      PYCTDEV_SELF_CHANNEL: "pyviz/label/dev"
    steps:
      - uses: pyviz-dev/holoviz_tasks/install@v0.1a5
        with:
          name: ui_test_suite
          python-version: 3.9
          channels: pyviz/label/dev,bokeh,conda-forge,nodefaults
          envs: "-o recommended -o tests -o build"
          cache: true
          playwright: true
        id: install
      - name: build pyodide wheels
        run: |
          conda activate test-environment
          python scripts/build_pyodide_wheels.py
      - name: launch jupyter
        run: |
          conda activate test-environment
          jupyter server extension enable panel.io.jupyter_server_extension --sys-prefix
          (jupyter lab --config panel/tests/ui/jupyter_server_test_config.py --port 8887 > /tmp/jupyterlab_server.log 2>&1) &
      - name: build jupyterlite
        run: |
          conda activate test-environment
          pip install jupyterlite
          python ./scripts/build_pyodide_wheels.py lite/pypi
          python ./scripts/generate_panelite_content.py
          jupyter lite build --lite-dir lite --output-dir lite/dist
      - name: Wait for JupyterLab
        uses: ifaxity/wait-on-action@v1
        with:
          resource: http-get://localhost:8887/lab
          timeout: 180000
      - name: doit test_ui
        run: |
          conda activate test-environment
          doit test_ui
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: ui-tests
          fail_ci_if_error: false # optional (default = false)
